/**
* {{query.name}}
* {{#if query.description}}{{query.description}}{{/if}}
* @generated Este arquivo foi gerado automaticamente - NÃO EDITAR
* @timestamp {{timestamp}}
*/
import { getConnection, DatabaseConnection } from '../connection/db-connection';

{{#if query.returnFields}}
export interface {{pascalCase query.returnType}} {
{{#each query.returnFields}}
  {{camelCase alias}}{{#if nullable}}?{{/if}}: {{type}}; {{#if isFunction}}// Função SQL{{/if}}
{{/each}}
}
{{/if}}
export interface {{pascalCase query.name}}Params {
{{#each query.params}}
    {{name}}: {{type}};
{{/each}}
}

export type {{pascalCase query.name}}Result = {{#if query.returnSingle}}{{query.returnType}}{{else}}{{query.returnType}}[]{{/if}};

export const {{camelCase query.name}}Query = `{{query.sql}}`;

/**
* Executa a consulta {{query.name}}
* @param params Parâmetros da consulta
* @param db Conexão opcional com o banco de dados, se não fornecida será obtida automaticamente
* @returns Resultado da consulta
*/
export async function {{camelCase query.name}}(
params: {{pascalCase query.name}}Params
): Promise<{{pascalCase query.name}}Result{{#unless query.returnSingle}}[]{{/unless}}> {
const connection = await getConnection();
return connection.execute<{{pascalCase query.name}}Result{{#unless query.returnSingle}}[]{{/unless}}>(
{{camelCase query.name}}Query,
Object.values(params)
);
}